swagger: '2.0'
info:
  description: |-
    This is an example implementation of API 
  version: '1.0'
  title: A swagger API definition
basePath: "/swaggerapp/1.0/"
tags:
- name: tasks
  description: General algorithmic tasks
- name: product
  description: Product List endpoints
- name: test
  description: Integration test
- name: misc
  description: ''
paths:
  "/operations/validateBrackets":
    get:
      tags:
      - tasks
      summary: Checks if brackets in a string are balanced
      description: |-
        Brackets in a string are considered to be balanced if the following criteria are met:
        - For every opening bracket (i.e., **`(`**, **`{`**, or **`[`**), there is a matching closing bracket (i.e., **`)`**, **`}`**, or **`]`**) of the same type (i.e., **`(`** matches **`)`**, **`{`** matches **`}`**, and **`[`** matches **`]`**). An opening bracket must appear before (to the left of) its matching closing bracket. For example, **`]{}[`** is not balanced.
        - No unmatched braces lie between some pair of matched bracket. For example, **`({[]})`** is balanced, but **`{[}]`** and **`[{)]`** are not balanced.
      schemes:
      - http
      - https
      produces:
      - application/json
      parameters:
      - name: input
        in: query
        description: Input string (max length 100)
        required: true
        type: string
        minLength: 1
        maxLength: 100
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/BalanceTestResult"
        '400':
          description: Validation error
          schema:
            "$ref": "#/definitions/productValidationError"
  "/product":
    post:
      tags:
      - product
      summary: Create a product entry
      schemes:
      - http
      - https
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          "$ref": "#/definitions/productAddRequest"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/product"
        '400':
          description: Validation error
          schema:
            "$ref": "#/definitions/productValidationError"
  "/product/list/":
    get:
      tags:
      - product
      summary: Retrieve a list of products 
      operationd: getProducts
      schemes:
      - http
      - https
      produces:
      - application/json
      parameters:
      - $ref: "#/parameters/Startindex"
      - $ref: "#/parameters/Pagelength"
      responses:
        '200':
          description: An array of customer orders
          schema:
             type: object
             allOf:
               - $ref: '#/definitions/PaginationResponse'
               - properties:
                   devices:
                     type: array
                     items:
                       $ref: '#/definitions/product'
        '400':
          description: Validation error
          schema:
            "$ref": "#/definitions/productValidationError"
        '404':
          description: Not Found Error
          schema:
            "$ref": "#/definitions/productNotFoundError"
  "/product/{id}":
    get:
      tags:
      - product
      summary: Retrieve a specific product by id
      schemes:
      - http
      - https
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: number
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/product"
        '400':
          description: Validation error
          schema:
            "$ref": "#/definitions/productValidationError"
        '404':
          description: Not Found Error
          schema:
            "$ref": "#/definitions/productNotFoundError"
    patch:
      tags:
      - product
      summary: Modify an product entry
      schemes:
      - http
      - https
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: number
      - name: body
        in: body
        required: true
        schema:
          "$ref": "#/definitions/productUpdateRequest"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/product"
        '400':
          description: Validation error
          schema:
            "$ref": "#/definitions/productValidationError"
        '404':
          description: Not Found Error
          schema:
            "$ref": "#/definitions/productNotFoundError"
  "/integrationTest":
    get:
      tags:
      - test
      summary: Run integration tests against remote API
      schemes:
      - http
      - https
      produces:
      - application/json
      parameters:
      - name: url
        in: query
        description: base url of remote API to test
        required: true
        type: string
        example: https://join.herokuUrl.com.au/test/1.0/
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/IntegrationTestResult"
  "/status":
    get:
      tags:
      - misc
      summary: Return system's status
      schemes:
      - http
      - https
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/StatusResponse"
definitions:
  BalanceTestResult:
    type: object
    properties:
      input:
        type: string
        example: "[(]"
      isBalanced:
        type: boolean
        example: false
  product:
    type: object
    properties:
      id:
        type: number
        example: 42
      text:
        type: string
        example: Uulwi ifis halahs gag erh'ongg w'ssh.
      isCompleted:
        type: boolean
        example: false
      createdAt:
        type: string
        example: '2017-10-13T01:50:58.735Z'
  productValidationError:
    type: object
    properties:
      details:
        type: array
        items:
          type: object
          properties:
            location:
              type: string
            param:
              type: string
            msg:
              type: string
            value:
              type: string
          example:
            location: params
            param: text
            msg: Must be between 1 and 50 chars long
            value: ''
      name:
        type: string
        example: ValidationError
  productNotFoundError:
    type: object
    properties:
      details:
        type: array
        items:
          type: object
          properties:
            message:
              type: string
          example:
            message: Item with 9 not found
      name:
        type: string
        example: NotFoundError
  productAddRequest:
    type: object
    properties:
      text:
        type: string
        example: Uulwi ifis halahs gag erh'ongg w'ssh.
        minLength: 1
        maxLength: 50
  productUpdateRequest:
    type: object
    properties:
      text:
        type: string
        example: Uulwi ifis halahs gag erh'ongg w'ssh.
        minLength: 1
        maxLength: 50
      isCompleted:
        type: boolean
        example: true
  BracersTestResult:
    type: object
    properties:
      input:
        type: string
      result:
        type: boolean
      expected:
        type: boolean
      isCorrect:
        type: boolean
  productTestResult:
    type: object
    properties:
      input:
        type: string
      result:
        "$ref": "#/definitions/product"
  IntegrationTestResult:
    type: object
    properties:
      bracers:
        type: array
        items:
          schema:
            "$ref": "#/definitions/BracersTestResult"
          example:
            input: "{}[]()"
            result: true
            expected: true
            isCorrect: true
      product:
        type: array
        items:
          schema:
            "$ref": "#/definitions/productTestResult"
          example:
            input: GET http://my-remote-api.com.au/api/1.0/product/1
            result:
              id: 1
              text: Yrr n'lyeth... shuul anagg!
              createdAt: '2017-10-15T23:04:44.082Z'
              isCompleted: false
            expected:
              id: "..."
              text: Yrr n'lyeth... shuul anagg!
              isCompleted: false
              createdAt: "..."
            isCorrect: true
      isCorrect:
        type: boolean
        example: true
  StatusResponse:
    type: object
    properties:
      status:
        type: string
        example: healthy
  PaginationResponse:
    type: object
    properties:
      totalrecords:
        type: number
      displayrecords:
        type: number
    xml:
      name: PaginationResponsedata
parameters:
  Pagelength:
    name: pagelength
    in: query
    description: Number of records to return
    type: number
  Startindex:
    name: startindex
    in: query
    description: Start index for paging
    type: number